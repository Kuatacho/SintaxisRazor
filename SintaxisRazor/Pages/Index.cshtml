@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Bienvenido</h1>
    <p>HOLA MUNDO!!</p>
    <p>La hora actual es: @DateTime.Now</p> 
    <p>La anterior semana esta hora: @(DateTime.Now-TimeSpan.FromDays(7))</p> 
    @{
        string msg = "El futuro es hoy viejo";
    }
    <p>@msg</p>

    @{
        msg = "Oiste viejo";
    }
    <p>@msg</p>

    @{
        void RenderNombre(string nombre)
        {
                        <p>Nombre: <strong>@nombre</strong></p>
        }
        RenderNombre("Victor Chavez");
        RenderNombre("Sebas Chavez");
    }

    @{
        string ConvertirEnMayusculas(string valor)
        {
            return valor.ToUpper();
        }
    }

    <h2>Convertir en Mayusculas-> @ConvertirEnMayusculas("juan pedro")</h2></br>


    @{
        int valor = 17;
    }
    @if(valor % 2 == 0)
    {
        <h3>El Numero es PAR</h3>
    }
    else
    {
        <h3>El Numero es IMPAR</h3>
    }

    @{
        valor = 2;
    }
    @switch (valor)
    {
        case 1:
            <p>El Valor es 1</p>
            break;
        case 2:
            <p>El valor es 2</p>
            break;
        default:
            <p>Su numero no es 1. ni 2</p>
            break;
    }


    @{
        var nombres = new List<string>() { "Hugo", "Paco", "Luis" };
    }
    
    @for (var i = 0; i < nombres.Count; i++)
    {
        <center>
        <table class="table-bordered">
        <thead>
            <tr>
                <th scope="col">Nro</th>
                <th scope="col">Nombre</th>
                    
 
        </thead>
        <tbody>
            <tr>
                <th scope="row">@i
                    <td>
                        @nombres[i]
                    </td>
                </th>
            </tr>
            
        </tbody>
        </table>
        </center>
        
    }
    
     

    @{
        nombres = new List<string>() { "Victor", "Pepe", "Juan" };
        var j = 0;
    }
    <ol>
        @while (j < nombres.Count)
        {
            <li>@nombres[j]</li>
            j++;
        }
    </ol>

    @try
    {
        throw new InvalidOperationException("Hiciste algo no valido");
    }
    catch (Exception ex)
    {
        <p>el mensaje de la excepciones es:@ex.Message</p>
    }
    finally
    {
        <p>Bloque que siempre se ejecuta!</p>
    }



</div>
